---
import type { ArtInfo } from "@/models/arte.model"
import { frontRoutes } from "@/models/routes.model"
import { getTimeFormatted } from "@/utils/date.util"
import {
IconBrandAppleFilled,
IconBrandSpotifyFilled,
IconBrandYoutubeFilled,
IconHeartFilled,
} from "@tabler/icons-react"
import { Badge } from "../ui/Badge"
import { Image } from "../ui/Image/Image"
import { Paragraph } from "../ui/Paragraph/Paragraph"

interface Props {
    artData: ArtInfo;
    albumInfo?: ArtInfo;
}

const { artData, albumInfo } = Astro.props;

const icons = {
    youtube: IconBrandYoutubeFilled,
    spotify: IconBrandSpotifyFilled,
    apple: IconBrandAppleFilled,
};
---

<div class="inline-flex flex-col lg:flex-row gap-2 w-full">
    <div class="flex flex-col gap-2 flex-shrink w-fit lg:w-auto m-auto lg:m-0">
        <Image
            className="!rounded-xl flex-shrink-0 self-center lg:self-start max-[370px]:!w-full"
            client:load
            src={artData.image}
            alt="Calls album image"
            height="320px"
            width="320px"
        />
        <div class="flex justify-between items-center gap-1">
            <div class="flex flex-col text-xs">
                {
                    artData?.type === "canción" && albumInfo != null && (
                        <>
                            <span class="text-zinc-400 text-[0.5rem] leading-3">
                                Album
                            </span>
                            <a
                                href={frontRoutes.dynamics.album.path(
                                    albumInfo.slug,
                                )}
                                class="text-[0.6rem] font-bold leading-3 text-zinc-300 hover:text-orange-100"
                            >
                                {albumInfo.title}
                            </a>
                        </>
                    )
                }
            </div>
            <div class="self-start flex items-center gap-1">
                <div class="self-start sm:self-center text-xs">
                    {
                        artData.state === "soon" && (
                            <Badge
                                className="flex items-center gap-1"
                                type="album"
                            >
                                Sale pronto{" "}
                                <IconHeartFilled
                                    className="text-red-400"
                                    width={20}
                                    height={20}
                                />
                            </Badge>
                        )
                    }
                </div>
                <div></div>
                {
                    artData.state === "released" &&
                        artData.links.map((link) => {
                            const Icon = icons[link.type];

                            return (
                                <a
                                    href={link.url}
                                    target="_blank"
                                    class="font-semibold"
                                >
                                    <Icon
                                        className="hover:scale-110 transition-all"
                                        style={{
                                            color:
                                                link.type === "youtube"
                                                    ? "rgb(239 68 68)"
                                                    : link.type === "spotify"
                                                      ? "rgb(34 197 94)"
                                                      : link.type === "apple"
                                                        ? "rgb(161 161 170)"
                                                        : "",
                                        }}
                                    />
                                </a>
                            );
                        })
                }
            </div>
        </div>
    </div>
    <div class="flex flex-col gap-1 overflow-hidden flex-grow">
        <div class="w-full flex flex-col">
            <h2
                class="text-[2rem] leading-8 sm:text-4xl text-center lg:text-start text-balance [text-shadow:1.4px_1.4px_1px_rgb(148,148,148)] font-bold"
            >
                {artData.title}
            </h2>
            <div class="flex justify-between items-center gap-2">
                <div class="text-[0.68rem] flex gap-1 mt-1">
                    {
                        artData.type === "album" && (
                            <Badge type="album">Álbum</Badge>
                        )
                    }
                    {
                        artData.type === "canción" && (
                            <Badge type="song">Canción</Badge>
                        )
                    }
                    {artData.tags.map((tag) => <Badge>{tag}</Badge>)}
                </div>
                <div class="text-xs italic text-zinc-400 font-medium">
                    <span class="text-[0.7rem]"> Relased on </span>
                    <time datetime="" class="text-zinc-300">
                        {getTimeFormatted(artData.releaseDate)}
                    </time>
                </div>
            </div>
        </div>
        <Paragraph
            maxHeight={artData.descriptionShowMoreButton ? "18rem" : undefined}
            client:load
            content={artData.description}
        />
    </div>
</div>
